[user]
	name = Santi AguÌˆero
	email = aguerosantiale@gmail.com
[credential]
	helper = cache --timeout=31556926
[alias]
    # === Cool alias from https://github.com/garybernhardt/dotfiles ===
    st = status -sb
    ci = commit --verbose
    co = checkout
    com = "![[ $(git branch --list main) ]] && git checkout main || git checkout master" # inclusive checkout main branch
    cp = cherry-pick
    di = diff --find-copies-harder
    dc = diff --find-copies-harder --cached
    ds = diff --stat=160,120
    dh = diff HEAD~1
    dm = "![[ $(git branch --list main) ]] && git diff main || git diff master" # inclusive dm
    amend = commit --amend
    aa = add --all
    ff = merge --ff-only
    noff = merge --no-ff
    pu = pull
    pullff = pull --ff-only
    fa = fetch --all
    pom = "![[ $(git branch --list main) ]] && git push origin main || git push origin master" # inclusive pom
    pf = push --force-with-lease # don't overwrite remote branch if commits were added  by someone else

    head = !git r -1
    h = !git head # head
    hp = "!. githelpers && show_git_head" # head with patch
    r = !GIT_NO_PAGER=1 git l -30 # recent commits, only current branch
    ra = !git r --all # recent commits, all reachable refs
    l = "!. githelpers && pretty_git_log" # all commits, only current branch
    la = !git l --all # all commits, all reachable refs
    b = "!. githelpers && pretty_git_branch" # all branches
    bs = "!. githelpers && pretty_git_branch_sorted" # all branches, sorted by last commit date
    g = log --oneline --decorate --graph  # all commits, only current branch (no githelpers dependency)
    ga = log --oneline --decorate --graph --all # all commits, all reachable refs (no githelpers dependency)

    # show parent of the branch, https://stackoverflow.com/a/52025740
    parent = "!git show-branch | grep '*' | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//' #"

    # === More cool alias from https://gist.github.com/robmiller/6018582 ===
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    # Push the current branch to the remote "origin", and set it to track the upstream branch
    publish = "!git push -u origin $(git branch-name)"
    # Interactively rebase all the commits on the current branch
    rebase-branch = "!git rebase -i `git merge-base master HEAD`"
    # Unstage any files that have been added to the staging area
    unstage = reset HEAD

    # === Easy rebasing from http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html ===
    cif = commit --fixup=HEAD
    squash = rebase -i --autosquash

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S\"$1\"; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=\"$1\"; }; f"

    # === Easy code review from https://blog.jez.io/cli-code-review ===
    # $REVIEW_BASE should exist (defaults to 'master' in my .exports)

    # list files which have changed since $REVIEW_BASE 
    files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")
    # Same as above, but with a diff stat instead of just names (better for interactive use)
    stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")
    heatmap = !$HOME/dotfiles/bin/git-heatmap
    # Open all files changed since $REVIEW_BASE in vim tabs and run fugitive's :Gdiff
    review = !vim -p $(git files) +\"tabdo Gvdiffsplit $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"
    # Same as the above, except specify names of files as arguments: git reviewone foo.js bar.js
    reviewone = !vim -p +\"tabdo Gvdiffsplit $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"

    recommit = !git add -A && git commit --reuse-message=HEAD

[core]
    # Use https://github.com/dandavison/delta
	; pager = "delta --theme=TwoDark"
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = /Users/santi/.gitignore_global
	attributesfile = ~/.gitattributes
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

[color]
	ui = auto

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[url "https://github.com/"]
	insteadOf = git://github.com/

[merge]
    tool = intellij
[difftool "intellij"]
    cmd = /Applications/IntelliJ\\ IDEA.app/Contents/MacOS/idea diff $(cd $(dirname \"$LOCAL\") && pwd)/$(basename \"$LOCAL\") $(cd $(dirname \"$REMOTE\") && pwd)/$(basename \"$REMOTE\")
[mergetool "intellij"]
    cmd = /Applications/IntelliJ\\ IDEA.app/Contents/MacOS/idea merge $(cd $(dirname \"$LOCAL\") && pwd)/$(basename \"$LOCAL\") $(cd $(dirname \"$REMOTE\") && pwd)/$(basename \"$REMOTE\") $(cd $(dirname \"$BASE\") && pwd)/$(basename \"$BASE\") $(cd $(dirname \"$MERGED\") && pwd)/$(basename \"$MERGED\")
    trustExitCode = true

[merge]
    tool = vscode
[mergetool "vscode"]
    cmd = code --wait $MERGED
[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE

[push]
    default = matching
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[commit]
	template = /Users/santi/.stCommitMsg
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

# rerere useful for pull --rebase conflicts
[rerere]
	enabled = true
