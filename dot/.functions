#!/bin/bash
function shorturl() {
    if [ -z "${1}" ]; then
        echo "Usage: \`shorturl url\`"
		return 1
	fi
    curl -s https://www.googleapis.com/urlshortener/v1/url \
      -H 'Content-Type: application/json' \
      -d '{"longUrl": '\"$1\"'}' | grep id | cut -d '"' -f 4
}

function print-ansi-colors()
{
    (
        x=`tput op` y=`printf %$((${COLUMNS}-6))s`;
        for i in {0..256};
        do
            o=00$i;
            echo -e ${o:${#o}-3:3} `tput setaf $i;tput setab $i`${y// /=}$x;
        done
    )
}

function git-status-all-folders()
{
    ls -la |
    grep "^d.*" |
    awk '{print $9}' |
    tail -n +4 |
    while read line; do
        echo $line && cd $line && git status -sb && cd ..;
    done
}

# Fast Find with a custom database (tip from the book unix power tools)
# Create the database with `find ~  | sed "s@^./@@" > ~/.fastfind`
function ff()
{
    egrep $* $HOME/.fastfind | sed "s@^@$HOME/@"
}

# Function from https://github.com/driv/upto
function up() {
	EXPRESSION="$1"
	if [ -z "$EXPRESSION" ]; then
		echo "A folder expression must be provided"
	else
		CURRENT_FOLDER="$(pwd)"
		MATCHED_DIR=""
		MATCHING=true

		while [ "$MATCHING" = true ]; do
			if [[ "$CURRENT_FOLDER" =~ $EXPRESSION ]]; then
				MATCHED_DIR="$CURRENT_FOLDER"
				CURRENT_FOLDER="$(dirname $CURRENT_FOLDER)"
			else
				MATCHING=false
			fi
		done
		if [ -n "$MATCHED_DIR" ]; then
			cd $MATCHED_DIR
		else
			echo "No Match."
		fi
	fi
}

# Use Gitâ€™s colored diff when available
if hash git &>/dev/null; then
	function diff() {
		git diff --no-index --color-words --word-diff "$@"
	}
fi

# Some utils if FZF is available
if hash fzf &>/dev/null; then
    # edit file in preferred EDITOR, defaults to vim
    fe() {
        local file
        if hash coderay &>/dev/null; then
            file=$(fzf --query="$1" --select-1 --exit-0 --preview 'coderay {}')
        else
            file=$(fzf --query="$1" --select-1 --exit-0 --preview 'cat {}')
        fi
        [ -n "$file" ] && ${EDITOR:-vim} "$file"
    }

    # browse git commit history, enter to show changes
    fshow() {
        local out sha q
        while out=$(
            git log --decorate=short --graph --oneline --color=always |
            fzf --ansi --multi --no-sort --reverse --query="$q" --print-query); do
            q=$(head -1 <<< "$out")
            while read sha; do
                [ -n "$sha" ] && git show --color=always $sha | less -R
            done < <(sed '1d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
        done
    }
fi

make-targets() {
  make -qp |
  awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}' |
  sort
}

md-to-html() {
  pandoc --from markdown_github --to html --standalone "$1" -o "$1".html
}

# adapted from https://github.com/baskerville/bin
count-chars-frequency() {
  if [ -n "$@" ]; then
    cat "$@" | perl -pe 's/(.)/$1\n/g' | sort | uniq -c | sort -nr
  fi
}

# adapted from https://github.com/baskerville/bin
cp-progress() {
  for pid in $(pgrep -x cp) ; do
    for fd in 4 3 ; do
      symlink="/proc/${pid}/fd/${fd}"
      if [ -L "$symlink" ] ; then
        ls -sh "$(readlink "$symlink")"
      fi
    done
  done
}

# kubectl get all does not get all :-/
# tip from https://github.com/kubernetes/kubectl/issues/151#issuecomment-402003022
kubectl-all() {
    kubectl api-resources --verbs=list -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found
}

# Cool AI integrations with raycast
# https://wengerk.medium.com/how-i-use-ai-raycast-ollama-and-git-to-help-me-write-better-commit-pull-request-messages-fa692d41d8ba
aimsg() {
    # Copy the staged diff to clipboard for AI analysis
    git --no-pager diff --cached | pbcopy

    # Get the current branch name
    branch=$(git symbolic-ref --short HEAD)

    # Open Raycast AI command with branch context
    open -g "raycast://ai-commands/commit-message?arguments={\"branch\":\"$branch\"}"
}

aipr() {
    if git show-ref --verify --quiet refs/heads/main; then
        base_branch="main"
    else
        base_branch="master"
    fi

    # Get the diff between current branch and main/dev
    diff=$(git log --oneline $base_branch.."$(git symbolic-ref --short HEAD)")

    # Launch Raycast AI command with diff data
    open -g "raycast://ai-commands/pr-description?arguments={\"diff\":\"$diff\"}"
}
